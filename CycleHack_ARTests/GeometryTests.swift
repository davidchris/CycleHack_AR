//
//  GeometryTests.swift
//  CycleHack_ARTests
//
//  Created by Leo Thomas on 16.09.17.
//  Copyright Â© 2017 CycleHackBer. All rights reserved.
//

import XCTest
@testable import CycleHack_AR

class GeometryTests: XCTestCase {
    
    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }
    
    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }
    
    func testDecodePointGeometry() {
        let jsonString = "{ \"type\": \"Point\", \"coordinates\": [ 13.3477435, 52.5758387 ] }"
        let data = jsonString.data(using: .utf8)!
        let point = try! JSONDecoder().decode(Geometry<[Float]>.self, from: data)
        XCTAssertEqual(point.type, "Point")
        XCTAssertEqual(point.coordinates, [13.3477435, 52.5758387])
    }
    
    func testDecodePolygon() {
        
        let jsonString = "{ \"type\": \"MultiLineString\", \"coordinates\": [ [ [ 13.3477435, 52.5758387 ], [ 13.3479347, 52.5758105 ] ], [ [ 13.3496259, 52.5754374 ], [ 13.3507485, 52.5751907 ], [ 13.3521629, 52.5747775 ], [ 13.3522237, 52.5747728 ], [ 13.3523332, 52.574767 ], [ 13.3526238, 52.5747613 ], [ 13.352737, 52.5747609 ], [ 13.3527463, 52.5747629 ], [ 13.3528799, 52.5747597 ], [ 13.3531775, 52.5747643 ], [ 13.3537026, 52.5747647 ], [ 13.3542954, 52.5747311 ], [ 13.3549037, 52.5746773 ], [ 13.3551751, 52.5746481 ], [ 13.3562021, 52.5745502 ], [ 13.3567635, 52.5745158 ], [ 13.3570364, 52.5745472 ] ], [ [ 13.3570364, 52.5745472 ], [ 13.3574492, 52.574489 ], [ 13.3578209, 52.5744365 ], [ 13.3583415, 52.5743582 ], [ 13.3591644, 52.5742482 ] ], [ [ 13.3570364, 52.5745472 ], [ 13.3567789, 52.5745834 ], [ 13.3562299, 52.5746439 ], [ 13.35522, 52.5747517 ], [ 13.3549363, 52.5747824 ], [ 13.3543008, 52.5748448 ], [ 13.353728, 52.5749388 ], [ 13.3533597, 52.5750178 ], [ 13.3531375, 52.5750627 ], [ 13.352603, 52.5751656 ], [ 13.3519621, 52.5752839 ], [ 13.3496259, 52.5754374 ] ], [ [ 13.35522, 52.5747517 ], [ 13.3551751, 52.5746481 ] ], [ [ 13.3562299, 52.5746439 ], [ 13.3562021, 52.5745502 ] ], [ [ 13.353728, 52.5749388 ], [ 13.3537026, 52.5747647 ] ], [ [ 13.3492602, 52.575514 ], [ 13.3493527, 52.5756619 ], [ 13.3493701, 52.5757319 ], [ 13.3491493, 52.5760385 ], [ 13.3489797, 52.5762637 ] ], [ [ 13.3487646, 52.5756148 ], [ 13.3484699, 52.5752081 ], [ 13.3483913, 52.5751713 ] ], [ [ 13.3479347, 52.5758105 ], [ 13.3487646, 52.5756148 ], [ 13.3492602, 52.575514 ], [ 13.3496259, 52.5754374 ] ] ] } "
        let data = jsonString.data(using: .utf8)!
        let point = try! JSONDecoder().decode(Geometry<[[[Float]]]>.self, from: data)
        XCTAssertEqual(point.type, "MultiLineString")
        let expectedCoordinatesResult: [[[Float]]] = [ [ [ 13.3477435, 52.5758387 ], [ 13.3479347, 52.5758105 ] ], [ [ 13.3496259, 52.5754374 ], [ 13.3507485, 52.5751907 ], [ 13.3521629, 52.5747775 ], [ 13.3522237, 52.5747728 ], [ 13.3523332, 52.574767 ], [ 13.3526238, 52.5747613 ], [ 13.352737, 52.5747609 ], [ 13.3527463, 52.5747629 ], [ 13.3528799, 52.5747597 ], [ 13.3531775, 52.5747643 ], [ 13.3537026, 52.5747647 ], [ 13.3542954, 52.5747311 ], [ 13.3549037, 52.5746773 ], [ 13.3551751, 52.5746481 ], [ 13.3562021, 52.5745502 ], [ 13.3567635, 52.5745158 ], [ 13.3570364, 52.5745472 ] ], [ [ 13.3570364, 52.5745472 ], [ 13.3574492, 52.574489 ], [ 13.3578209, 52.5744365 ], [ 13.3583415, 52.5743582 ], [ 13.3591644, 52.5742482 ] ], [ [ 13.3570364, 52.5745472 ], [ 13.3567789, 52.5745834 ], [ 13.3562299, 52.5746439 ], [ 13.35522, 52.5747517 ], [ 13.3549363, 52.5747824 ], [ 13.3543008, 52.5748448 ], [ 13.353728, 52.5749388 ], [ 13.3533597, 52.5750178 ], [ 13.3531375, 52.5750627 ], [ 13.352603, 52.5751656 ], [ 13.3519621, 52.5752839 ], [ 13.3496259, 52.5754374 ] ], [ [ 13.35522, 52.5747517 ], [ 13.3551751, 52.5746481 ] ], [ [ 13.3562299, 52.5746439 ], [ 13.3562021, 52.5745502 ] ], [ [ 13.353728, 52.5749388 ], [ 13.3537026, 52.5747647 ] ], [ [ 13.3492602, 52.575514 ], [ 13.3493527, 52.5756619 ], [ 13.3493701, 52.5757319 ], [ 13.3491493, 52.5760385 ], [ 13.3489797, 52.5762637 ] ], [ [ 13.3487646, 52.5756148 ], [ 13.3484699, 52.5752081 ], [ 13.3483913, 52.5751713 ] ], [ [ 13.3479347, 52.5758105 ], [ 13.3487646, 52.5756148 ], [ 13.3492602, 52.575514 ], [ 13.3496259, 52.5754374 ] ] ]
        XCTAssert(point.coordinates == expectedCoordinatesResult)
    }
}
